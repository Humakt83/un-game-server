{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["socket","App","useState","messages","setMessages","addMessage","message","concat","className","type","id","value","onClick","uri","window","location","host","pathname","substring","lastIndexOf","WebSocket","onerror","error","onopen","event","currentTarget","url","onmessage","data","onclose","code","reason","text","document","getElementById","send","close","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"+HAGIA,E,6DA8EWC,MA5Ef,WAAgB,IAAD,EAEmBC,mBAAS,IAF5B,mBAENC,EAFM,KAEIC,EAFJ,KAIPC,EAAa,SAACC,GAClBF,EAAYD,EAASI,OAAOD,KAiD9B,OACE,sBAAKE,UAAU,MAAf,UACE,gDACA,8BACE,uBAAOC,KAAK,OAAOC,GAAG,QAAQC,MAAM,6BAEtC,gCACI,wBAAQF,KAAK,SAASC,GAAG,OAAOE,QArD3B,WACX,GAAIZ,EACFK,EAAW,yBADb,CAKA,IAAIQ,EAAM,QAAUC,OAAOC,SAASC,KAAOF,OAAOC,SAASE,SAC3DJ,EAAMA,EAAIK,UAAU,EAAGL,EAAIM,YAAY,OACvCnB,EAAS,IAAIoB,UAAUP,IAEhBQ,QAAU,SAASC,GACxBjB,EAAW,SAAD,OAAUiB,KAGtBtB,EAAOuB,OAAS,SAASC,GACvBnB,EAAW,wBAAD,OAAyBmB,EAAMC,cAAcC,OAGzD1B,EAAO2B,UAAY,SAASH,GACxBnB,EAAW,iBAAD,OAAkBmB,EAAMI,QAGtC5B,EAAO6B,QAAU,SAASL,GACtBnB,EAAW,yBAAD,OAA0BmB,EAAMM,KAAhC,YAAwCN,EAAMO,SACxD/B,EAAS,QA6BP,kBACA,wBAAQS,KAAK,SAASC,GAAG,OAAOE,QA1B3B,WACX,GAAKZ,EAAL,CAIA,IAAMgC,EAAOC,SAASC,eAAe,SAASvB,MAC9CX,EAAOmC,KAAKH,GACZ3B,EAAW,aAAD,OAAc2B,SALtB3B,EAAW,wBAwBP,kBACA,wBAAQI,KAAK,SAASC,GAAG,QAAQE,QAjB3B,WACPZ,EAILA,EAAOoC,MAAM,IAAM,wBAHjB/B,EAAW,yBAeP,sBAEJ,8BACGF,EAASkC,KAAI,SAAA/B,GACZ,OACE,4BAAIA,aC7DDgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhB,SAASC,eAAe,SAM1BI,K","file":"static/js/main.f8f8291d.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\nlet socket;\n\nfunction App() {\n\n  const [messages, setMessages] = useState([]);\n\n  const addMessage = (message) => {\n    setMessages(messages.concat(message))\n  }\n  \n  const open = () => {\n    if (socket) {\n      addMessage('Already connected');\n      return;\n    }\n    \n    let uri = \"ws://\" + window.location.host + window.location.pathname;\n    uri = uri.substring(0, uri.lastIndexOf('/'));\n    socket = new WebSocket(uri);\n    \n    socket.onerror = function(error) {\n      addMessage(`error ${error}`);\n    };\n    \n    socket.onopen = function(event) {\n      addMessage(`opened, Connected to ${event.currentTarget.url}`);\n    };\n    \n    socket.onmessage = function(event) {\n        addMessage(`received <<<  ${event.data}`);\n    };\n    \n    socket.onclose = function(event) {\n        addMessage(`closed, Disconnected: ${event.code} ${event.reason}`);\n        socket = null;\n    };\n  }\n\n  const send = () => {\n    if (!socket) {\n      addMessage(`error Not connected`);\n      return;\n    }\n    const text = document.getElementById(\"input\").value;\n    socket.send(text);\n    addMessage(`sent >>>  ${text}`);\n  }\n\n  const close = () => {\n    if (!socket) {\n      addMessage(`error 'Not connected`);\n      return;\n    }\n    socket.close(1000, 'Close button clicked');\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>WebSocket Demo</h1>\n      <div>\n        <input type=\"text\" id=\"input\" value=\"Enter text to reverse!\" />\n      </div>\n      <div>\n          <button type=\"button\" id=\"open\" onClick={open}>Open</button>\n          <button type=\"button\" id=\"send\" onClick={send}>Send</button>\n          <button type=\"button\" id=\"close\" onClick={close}>Close</button>\n      </div>\n      <div>\n        {messages.map(message => {\n          return (\n            <p>{message}</p>\n          )\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}